{"version":3,"file":"appBundle.js","sourceRoot":"","sources":["../../scripts/index.ts","../../scripts/application/app.ts","../../scripts/application/controllers.ts","../../scripts/application/services.ts"],"names":[],"mappings":"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","sourcesContent":["// For an introduction to the Blank template, see the following documentation:\r\n// http://go.microsoft.com/fwlink/?LinkID=397705\r\n// To debug code on page load in Ripple or on Android devices/emulators: launch your app, set breakpoints, \r\n// and then run \"window.location.reload()\" in the JavaScript Console.\r\nmodule MinesweeperGame {\r\n    \"use strict\";\r\n\r\n    export module Application {\r\n        export function initialize() {\r\n            document.addEventListener('deviceready', onDeviceReady, false);\r\n        }\r\n\r\n        function onDeviceReady() {\r\n            // Handle the Cordova pause and resume events\r\n            document.addEventListener('pause', onPause, false);\r\n            document.addEventListener('resume', onResume, false);\r\n\r\n            // TODO: Cordova has been loaded. Perform any initialization that requires Cordova here.\r\n            // var parentElement = document.getElementById('deviceready');\r\n            // var listeningElement = parentElement.querySelector('.listening');\r\n            // var receivedElement = parentElement.querySelector('.received');\r\n            // listeningElement.setAttribute('style', 'display:none;');\r\n            // receivedElement.setAttribute('style', 'display:block;');\r\n            var domElement = document.getElementById('app');\r\n            angular.bootstrap(domElement, [\"minesweeperApp\"]);\r\n        }\r\n\r\n        function onPause() {\r\n            // TODO: This application has been suspended. Save application state here.\r\n        }\r\n\r\n        function onResume() {\r\n            // TODO: This application has been reactivated. Restore application state here.\r\n        }\r\n\r\n    }\r\n\r\n    window.onload = function () {\r\n        Application.initialize();\r\n    }\r\n}\r\n","/// <reference path=\"../typings/angularjs/angular.d.ts\" />\r\n/// <reference path=\"../typings/angularjs/angular-route.d.ts\" />\r\n'use strict';\r\nmodule MinesweeperApp {\r\n\r\n    var routeConfig = function ($stateProvider) {\r\n        $stateProvider\r\n            .state('default', {\r\n                url: '/',\r\n                templateUrl: \"templates/home.html\",\r\n                controller: HomeController\r\n            })\r\n            .state('home', {\r\n                url: '/home',\r\n                templateUrl: \"templates/home.html\",\r\n                controller: HomeController\r\n            })\r\n            .state('game-config-size', {\r\n                url: '/game-config',\r\n                templateUrl: \"templates/game-config.html\",\r\n                controller: GameConfigController\r\n            })\r\n            .state('game-config-difficulty', {\r\n                url: '/game-config/:x/:y',\r\n                templateUrl: \"templates/game-config.html\",\r\n                controller: GameConfigController,\r\n                // params: {x: 10, y: 10}\r\n            })\r\n            .state('game', {\r\n                url: '/game/:x/:y/:difficulty',\r\n                templateUrl: \"templates/game.html\",\r\n                controller: GameController,\r\n                // params: {x: 10, y: 10, difficulty: 10}\r\n            })\r\n            .state('score', {\r\n                url: '/scores',\r\n                templateUrl: \"templates/score.html\",\r\n                controller: ScoreController\r\n            })\r\n            .state(\"otherwise\", {\r\n                url: \"*path\",\r\n                templateUrl: \"templates/home.html\",\r\n                controller: HomeController\r\n            });\r\n    }\r\n    routeConfig.$inject = ['$stateProvider']\r\n\r\n    angular.module('minesweeperApp', ['ui.router', 'ngRoute'])\r\n        .service('gameService', GameService)\r\n        .service('mineDisplayService', MineDisplayService)\r\n        .controller('homeController', HomeController)\r\n        .controller('gameConfigController', GameConfigController)\r\n        .controller('gameController', GameController)\r\n        .controller('scoreController', ScoreController)\r\n        .config(routeConfig);\r\n}","module MinesweeperApp {\r\n    export class GameController {\r\n        // Controller to store game state and create wrapper functions for the GameService interface\r\n\r\n        static $inject = ['$scope', '$stateParams', '$interval', 'gameService', 'mineDisplayService'];\r\n        public $scope: ng.IScope;\r\n        private $interval: ng.IIntervalService;\r\n        private timeCounter: any;\r\n        private gameService: IGameService;\r\n        private mineDisplayService: IClassEnumService;\r\n        public gameData: GameData;\r\n        public game: Array<Array<number>>;\r\n        public markingCursor: boolean;\r\n        public mineMarkerText: string;\r\n\r\n        constructor(\r\n            $scope: ng.IScope,\r\n            $stateParams: ng.ui.IStateParamsService,\r\n            $interval: ng.IIntervalService,\r\n            gameService: GameService,\r\n            mineDisplayService: MineDisplayService\r\n        ) {\r\n            // Bind scope to controller fields\r\n            $scope.vm = this;\r\n            this.markingCursor = false;\r\n            this.mineMarkerText = \"Activate Marker\";\r\n            // Setup services\r\n            this.gameService = gameService;\r\n            this.mineDisplayService = mineDisplayService;\r\n            // Setup Game\r\n            this.gameData = new GameData($stateParams.x, $stateParams.y, $stateParams.difficulty);\r\n            this.gameService.setGameSize(this.gameData.x, this.gameData.y);\r\n            this.loadGame(this.gameData.mineCount);\r\n            // Start game timer\r\n            this.$interval = $interval;\r\n            this.startTime();\r\n            console.log(this.game);\r\n        }\r\n\r\n        private loadGame(mineCount: number) {\r\n            // Initalizes a game based on the size (x, y) and a difficulty (mine count)\r\n            this.game = this.gameService.loadGame(mineCount);\r\n        }\r\n\r\n        public makeMove(x: number, y: number): void {\r\n            // Makes a move and changes game state through game service, then checks if it is solved\r\n            // If is marking cursor mode\r\n            if (this.markingCursor) {\r\n                this.markMine(x, y);\r\n                return\r\n            }\r\n            // If in not mine marking mode;\r\n            if (!this.gameService.makeMove(x, y, this.game)) {\r\n                this.failedGame();\r\n            }\r\n            if (this.gameService.isSolved(this.game)) {\r\n                this.gameData.isSolved = true;\r\n                this.$interval.cancel(this.timeCounter);\r\n            }\r\n            if (this.gameData.mineDisplayCount != this.gameData.mineCount) {\r\n                this.gameData.mineDisplayCount =\r\n                    this.gameData.mineCount - this.gameService.updateMineCount(this.game);\r\n            }\r\n        }\r\n\r\n        // use like <tag ng-class=\"getClass(x, y)\"/> where x/y is column/row\r\n        public getClass(x: number, y: number): string {\r\n            // Wrapper to determine the style (class) of a square based on its state/mine value\r\n            return this.mineDisplayService.getClass(this.game[y][x], this.gameData.gameFailed);\r\n        }\r\n\r\n        public toggleMineMarker(): void {\r\n            this.markingCursor = !this.markingCursor;\r\n            this.mineMarkerText = (this.markingCursor) ?\r\n                \"Deactivate Marker\" : \"Activate Marker\";\r\n        }\r\n\r\n        public getMineMarkerClass(): string {\r\n            if (this.markingCursor) {\r\n                return 'marker-activated button button-block button-positive';\r\n            }\r\n            return 'marker-deactivated button button-block button-calm';\r\n        }\r\n\r\n        public markMine(x: number, y: number): void {\r\n            // Player marks a square as a mine. Not activated as how does right clicking work on the app?\r\n            this.gameData.mineDisplayCount += this.gameService.markMine(x, y, this.game);\r\n        }\r\n\r\n        private failedGame(): void {\r\n            // Changed game state to failed, notifies view\r\n            this.$interval.cancel(this.timeCounter);\r\n            this.gameData.gameFailed = true;\r\n        }\r\n\r\n        // private gameTimer($scope: ng.IScope): void {\r\n        private gameTimer(): void {\r\n            // Function to be run in a setInterval to track time passed since game start\r\n            this.gameData.timeCount++;\r\n        }\r\n\r\n        private startTime(): void {\r\n            this.timeCounter = this.$interval(() => this.gameTimer(), 1000);\r\n        }\r\n\r\n        private resetGame(): void {\r\n            this.gameService.resetGame(this.game);\r\n            this.gameData.timeCount = 0;\r\n            this.startTime();\r\n            this.gameData.gameFailed = false;\r\n            this.gameData.isSolved = false;\r\n        }\r\n    }\r\n\r\n    export class GameConfigController {\r\n        // Controller to handle views related to config of minesweeper game. Relies on stateParams to pass user values\r\n        // between GameConfig instances as well as to initialize the game\r\n\r\n        static $inject = ['$stateParams', '$scope'];\r\n        public $scope: ng.IScope\r\n        private gameSizes: Array<any>;\r\n        private gameDifficulties: Array<any>;\r\n        public showDifficulties: boolean;\r\n\r\n        constructor($stateParams: ng.ui.IStateParamsService, $scope: ng.IScope) {\r\n            this.$scope = $scope;\r\n            this.$scope.x = ($stateParams.x != undefined) ? $stateParams.x : 0;\r\n            this.$scope.y = ($stateParams.y != undefined) ? $stateParams.y : 0;\r\n            this.$scope.showDifficulty = (this.$scope.x != 0 && this.$scope.y != 0);\r\n            this.$scope.title = (this.$scope.showDifficulty) ?\r\n                'Game Setup - Difficulty' : 'Game Setup - Size';\r\n\r\n            this.$scope.gameSizes = [\r\n                new GameSize(10, 10, 'Small (10 x 10)'),\r\n                new GameSize(10, 20, 'Medium (10 X 20)'),\r\n                new GameSize(10, 30, 'Large (10 x 30)')\r\n            ];\r\n\r\n            this.$scope.gameDifficulties = [\r\n                new GameDifficulty(10, 'Easy'),\r\n                new GameDifficulty(20, 'Medium'),\r\n                new GameDifficulty(30, 'Hard')\r\n            ];\r\n        }\r\n    }\r\n\r\n    class GameSize {\r\n        // Datatype to store game config data for board size (x * y) and a user label (size)\r\n        public name: string;\r\n        public x: number;\r\n        public y: number;\r\n\r\n        constructor(x: number, y: number, name: string) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.name = name;\r\n        }\r\n    }\r\n\r\n    class GameDifficulty {\r\n        // Datatype to store game difficulty for game config. Diffculty is the percentage (i.e. 10 == 10% fo squares are bombs)\r\n        public difficulty: number;\r\n        public name: string;\r\n\r\n        constructor(difficulty: number, name: string) {\r\n            this.difficulty = difficulty;\r\n            this.name = name;\r\n        }\r\n    }\r\n\r\n    export class HomeController {\r\n        // Simple controller to store messages for the Home view to either start game or view scores. \r\n        static $inject = ['$scope'];\r\n        public startGameMessage: string;\r\n        public scoresMessage: string;\r\n        public $scope: ng.IScope;\r\n\r\n        constructor($scope: ng.IScope) {\r\n            this.$scope = $scope;\r\n            this.$scope.title = 'Home';\r\n            this.$scope.startGameMessage = \"New Game\";\r\n            this.$scope.scoresMessage = \"My High Scores\";\r\n        }\r\n    }\r\n\r\n    class GameData {\r\n        // Wrapper type to group game state data together in a single object\r\n        public x: number;\r\n        public y: number;\r\n        public gameFailed: boolean;\r\n        public isSolved: boolean;\r\n        public difficulty: number;\r\n        public mineCount: number;\r\n        public mineDisplayCount: number;\r\n        public timeCount: number;\r\n\r\n        constructor(x: number, y: number, difficulty: number) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.difficulty = difficulty;\r\n            this.mineCount = this.mineDisplayCount =\r\n                Math.floor(this.x * this.y * this.difficulty / 100);\r\n            this.isSolved = false;\r\n            this.gameFailed = false;\r\n            this.timeCount = 0;\r\n        }\r\n    }\r\n\r\n    export class ScoreController {\r\n        // TODO score controller to track and view data for the user's games\r\n    }\r\n}","// App modelled after: https://github.com/ricardocanelas/angularjs-typescript-sample-app/blob/master/app/src/services/companyService.ts\r\nmodule MinesweeperApp {\r\n\r\n    export interface IGameService {\r\n        // Interface handles implementation of game logic, which the controller creates wrappers around\r\n        // The service is also stateless, the controller passes a game state and remembers the game state.\r\n        // Modifies reference of game board, and recursively searches a move to propagate areas with no bombs\r\n        // Searching also calculates the number of bombs near uncovered areas.\r\n\r\n        // Constructor Params for game size\r\n        loadGame(mineCount: number): Array<Array<number>>;\r\n        // Set game size for individual instance of the game service\r\n        setGameSize(x: number, y: number): void;\r\n        // Move is a wrapper that firswt decides if they lost, and if not, propagates a \r\n        // choice out show all continuous squares with no bombs\r\n        makeMove(x: number, y: number, game: Array<Array<number>>): boolean;\r\n        // Function to mark a suspected mine\r\n        markMine(x: number, y: number, game: Array<Array<number>>): number;\r\n        // Function to update mine count if improperly flagged circle\r\n        updateMineCount(game: Array<Array<number>>): number;\r\n        // Function to check if the game is solved\r\n        isSolved(game: Array<Array<number>>): boolean;\r\n        // Function to restart the game\r\n        resetGame(game: Array<Array<number>>): void;\r\n        // This is the service value that represents a bomb, selected to be -1;\r\n        mineValue: number;\r\n\r\n        /* Mine values:\r\n            -3:         Marked Mine that is a Mine: will display marked flag on a mine;\r\n            -2:         Marked Mine: will display a black square with a 'flag' marker; need to figure out cursor ui\r\n            -1:         Mine: will remain covered until gameState = failed\r\n            undefined:  Covered/unknown by player\r\n            1:          1 Mine\r\n            N:          N Mines, 1 <= N <= 8\r\n        */\r\n    }\r\n\r\n    export class GameService implements IGameService {\r\n        static $inject = ['$q'];\r\n        public mineValue: number;\r\n        public markedValue: number;\r\n        public markedMineValue: number;\r\n        private sizeX: number;\r\n        private sizeY: number;\r\n\r\n        constructor(private $q: ng.IQService) {\r\n            this.mineValue = -1;\r\n            this.markedValue = -2;\r\n            this.markedMineValue = -3;\r\n        }\r\n\r\n        loadGame(mineCount: number): Array<Array<number>> {\r\n            var game = this.createEmptyArray(this.sizeX, this.sizeY);\r\n            var randX: number, randY: number;\r\n            // Randomly pick indices\r\n            while (mineCount > 0) {\r\n                randX = this.randomIntFromInterval(0, this.sizeX - 1);\r\n                randY = this.randomIntFromInterval(0, this.sizeY - 1);\r\n                if (game[randY][randX] === undefined) {\r\n                    game[randY][randX] = -1;\r\n                    mineCount--;\r\n                }\r\n            }\r\n            return game;\r\n        }\r\n\r\n        markMine(x: number, y: number, game: Array<Array<number>>): number {\r\n            // Return number used to update the number of mines marked versus total mines\r\n            // return: amount to increment mineDisplayAmount\r\n            if (game[y][x] != this.markedValue && game[y][x] != this.markedMineValue && game[y][x] === undefined) {\r\n                // Allow unselected squares to be marked only\r\n                game[y][x] = this.markedValue;\r\n                return -1;\r\n            } else if (game[y][x] == this.markedValue) {\r\n                // case to unmark squares\r\n                game[y][x] = undefined;\r\n                return 1;\r\n            } else if (game[y][x] == this.markedMineValue) {\r\n                game[y][x] = this.mineValue;\r\n            } else if (game[y][x] == this.mineValue) {\r\n                game[y][x] = this.markedMineValue;\r\n                return -1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        makeMove(x: number, y: number, game: Array<Array<number>>): boolean {\r\n            // Move calculates if move is a mine (false == fail), else propagates choice until it hits non 0 value (0 mine around) places\r\n            if (game[y][x] < 0 || game[y][x] === undefined) {\r\n                if (game[y][x] == this.mineValue) {\r\n                    return false;\r\n                }\r\n                if (game[y][x] == this.markedMineValue || game[y][x] == this.markedValue) {\r\n                    return true;\r\n                }\r\n                game[y][x] = this.countMines(x, y, game);\r\n                if (game[y][x] == 0) {\r\n                    var searched = this.createEmptyBooleanArray(this.sizeX, this.sizeY);\r\n                    this.searchMove(x, y, game, searched);\r\n                }\r\n                return true;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        searchMove(x: number, y: number, game: Array<Array<number>>, searched: Array<Array<boolean>>): void {\r\n            // Recursive helper to continue searching adjacent squares until it reaches one that is bordering a mine, at which point recursive calls stop\r\n            var mines: number;\r\n            for (var i = y - 1; i <= y + 1; i++) {\r\n                for (var j = x - 1; j <= x + 1; j++) {\r\n                    if ((i >= 0 && i < this.sizeY) && (j >= 0 && j < this.sizeX) && !searched[i][j] && game[i][j] != this.mineValue) {\r\n                        mines = this.countMines(j, i, game);\r\n                        searched[i][j] = true;\r\n                        game[i][j] = mines;\r\n                        if (mines == 0) {\r\n                            this.searchMove(j, i, game, searched);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private countMines(x: number, y: number, game: Array<Array<number>>): number {\r\n            // Helper function to count the number of mines around a point (a total of 8 bordering squares)\r\n            var bombCount = 0;\r\n            for (var i = y - 1; i <= y + 1; i++) {\r\n                for (var j = x - 1; j <= x + 1; j++) {\r\n                    if ((j >= 0 && j < this.sizeX) && (i >= 0 && i < this.sizeY)) {\r\n                        if (game[i][j] == this.mineValue || game[i][j] == this.markedMineValue) {\r\n                            bombCount++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return bombCount;\r\n        }\r\n\r\n        public isSolved(game: Array<Array<number>>) {\r\n            // Checks to see if the current game is solved\r\n            for (var i = 0; i < this.sizeY; i++) {\r\n                for (var j = 0; j < this.sizeX; j++) {\r\n                    if (game[i][j] === undefined) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        public solveGame(game: Array<Array<number>>): void {\r\n            for (var i = 0; i < this.sizeY; i++) {\r\n                for (var j = 0; j < this.sizeX; j++) {\r\n                    if (game[i][j] === undefined) {\r\n                        game[i][j] = this.countMines(j, i, game)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public updateMineCount(game: Array<Array<number>>): number {\r\n            var markedMineCount = 0;\r\n            for (var i = 0; i < this.sizeY; i++) {\r\n                for (var j = 0; j < this.sizeX; j++) {\r\n                    if (game[i][j] == this.markedMineValue) {\r\n                        markedMineCount++;\r\n                    }\r\n                }\r\n            }\r\n            return markedMineCount;\r\n        }\r\n\r\n        private randomIntFromInterval(min: number, max: number) {\r\n            // Helper function to choose a random number between min and max\r\n            // Used to choose a game[rand][rand] place for a bomb placement\r\n            return Math.floor(Math.random() * (max - min + 1) + min);\r\n        }\r\n\r\n        private createEmptyArray(x: number, y: number): Array<Array<number>> {\r\n            // Helper function to create an empty array of all undefined values as preliminary game structure\r\n            var game = new Array();\r\n            for (var i = 0; i < y; i++) {\r\n                var tmp = new Array();\r\n                for (var j = 0; j < x; j++) {\r\n                    tmp.push(undefined);\r\n                }\r\n                game.push(tmp);\r\n            }\r\n            return game;\r\n        }\r\n\r\n        private createEmptyBooleanArray(x: number, y: number): Array<Array<boolean>> {\r\n            // Helper function to create array the same size of the game to keep track of searched squares; initalizes as all false values\r\n            var arr = new Array();\r\n            for (var i = 0; i < y; i++) {\r\n                var tmp = new Array();\r\n                for (var j = 0; j < x; j++) {\r\n                    tmp.push(false);\r\n                }\r\n                arr.push(tmp);\r\n            }\r\n            return arr;\r\n        }\r\n\r\n        public setGameSize(x: number, y: number): void {\r\n            // Helper function to set a reference to a game size;\r\n            this.sizeX = x;\r\n            this.sizeY = y;\r\n        }\r\n\r\n        public resetGame(game: Array<Array<number>>): void {\r\n            for (var i = 0; i < this.sizeY; i++) {\r\n                for (var j = 0; j < this.sizeX; j++) {\r\n                    if (game[i][j] != this.mineValue) {\r\n                        game[i][j] = undefined;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Need to register service to app in this file, otherwise it is undefined in angularJS for some reason\r\n    angular.module('minesweeperApp').service('gameService', GameService);\r\n    \r\n\r\n    export interface IClassEnumService {\r\n        // Interface to determine the display of a square based on its mine value. Display is defined in game.css\r\n        getClass(value: number, failedGame: boolean): string;\r\n    }\r\n\r\n    export class MineDisplayService implements IClassEnumService {\r\n\r\n        static $inject = ['$q'];\r\n\r\n        constructor(private $q: ng.IQService) {\r\n        }\r\n\r\n        getClass(value: number, failedGame: boolean): string {\r\n            // Helper function to determine current state of a tile and return the class value for the square\r\n            var displayClass: string;\r\n            switch (value) {\r\n                case -3:\r\n                    displayClass = \"marked-mine\";\r\n                case -2:\r\n                    displayClass = \"marked-mine\";\r\n                    break;\r\n                case -1:\r\n                    // TODO remove redebugging lines here when finished!\r\n                    if (failedGame) {\r\n                        displayClass = \"mine\";\r\n                    } else {\r\n                        displayClass = \"blank\";\r\n                    }\r\n                    // TODO commend above and uncomment below for debugging/ to see mines\r\n                    // displayClass = \"mine\";\r\n                    break;\r\n                case 0:\r\n                    displayClass = \"no-mine\";\r\n                    break;\r\n                case 1:\r\n                    displayClass = \"one-mine\";\r\n                    break;\r\n                case 2:\r\n                    displayClass = \"two-mine\";\r\n                    break;\r\n                case 3:\r\n                    displayClass = \"three-mine\";\r\n                    break;\r\n                case 4:\r\n                    displayClass = \"four-mine\";\r\n                    break;\r\n                case 5:\r\n                    displayClass = \"five-mine\";\r\n                    break;\r\n                case 6:\r\n                    displayClass = \"six-mine\";\r\n                    break;\r\n                case 7:\r\n                    displayClass = \"seven-mine\";\r\n                    break;\r\n                case 8:\r\n                    displayClass = \"eight-mine\"\r\n                    break;\r\n                default:\r\n                    displayClass = \"blank\"\r\n            }\r\n            return displayClass;\r\n        }\r\n    }\r\n    angular.module('minesweeperApp').service('mineDisplayService', MineDisplayService);\r\n}"]}